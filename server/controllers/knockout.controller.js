import KnockoutMatch from '../models/KnockoutMatch.js';
import Participant from '../models/Participant.js';
import KnockoutParticipant from '../models/KnockoutParticipant.js';
import User from '../models/User.js';
import Tournament from '../models/Tournament.js';
import TournamentParticipant from '../models/TournamentParticipant.js';

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á
const createMatch = async (req, res) => {
  try {
    const { tournamentId } = req.params;
    const { initialRoundMatches } = req.body;
    // console.log('initialRoundMatches', initialRoundMatches);

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—É–Ω–¥—É
    for (let i = 0; i < initialRoundMatches.length; i++) {
      const roundMatches = initialRoundMatches[i];
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞—Ç—á—É –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ
      for (let j = 0; j < roundMatches.length; j++) {
        const match = roundMatches[j];
        console.log('match', match);

        // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–º–∞–Ω–¥
        const participant1 = await KnockoutParticipant.findOne({ username: match.team1.username });
        const participant2 = await KnockoutParticipant.findOne({ username: match.team2.username });
        // console.log('participant1,', participant1);
        // console.log('participant2,', participant2);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞–π–¥–µ–Ω—ã
        if (!participant1 || !participant2) {
          return res.status(404).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∫–æ–º–∞–Ω–¥.' });
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç—á —Å ObjectId —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–º–µ—Å—Ç–æ –∏—Ö –∏–º–µ–Ω
        const matchKnock = await KnockoutMatch.create({
          tournament: tournamentId,
          round: match.round,
          team1: participant1.username,
          team2: participant2.username,
        });
        await matchKnock.save();

        await Tournament.findByIdAndUpdate(tournamentId, { $push: { knockMatches: matchKnock._id } }, { new: true });
      }
    }
    await Tournament.findByIdAndUpdate(tournamentId, { isStarted: true });
    res.status(201).json(initialRoundMatches);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç—á–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –≤—ã–ª–µ—Ç
const getMatches = async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º id —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const { tournamentId } = req.params;
    // console.log('getMatches', req.params);

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –º–∞—Ç—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    const matches = await KnockoutMatch.find({ tournament: tournamentId });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
    const roundMatches = matches.reduce((acc, match) => {
      if (!acc[match.round]) {
        acc[match.round] = [];
      }
      acc[match.round].push(match);
      return acc;
    }, {});

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç —Å –º–∞—Ç—á–∞–º–∏ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤ –º–∞—Å—Å–∏–≤
    const roundMatchesArray = Object.values(roundMatches);

    res.json({ roundMatches: roundMatchesArray, message: '–ë—É—è–∫–∞ –±—É—è–∫–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤
const createMatchFromObject = async (req, res) => {
  try {
    const { tournamentId } = req.params;
    const { initialRoundMatches } = req.body;
    console.log('initialRoundMatchesaaa', initialRoundMatches);

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—É–Ω–¥—É
    for (let i = 0; i < initialRoundMatches.length; i++) {
      const roundMatch = initialRoundMatches[i];
      console.log('roundMatch', roundMatch);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç—á
      const matchKnock = await KnockoutMatch.create({
        tournament: tournamentId,
        round: roundMatch.round + 1,
        team1: roundMatch.team1,
        team2: roundMatch.team2,
      });
      await matchKnock.save();
      await Tournament.findByIdAndUpdate(tournamentId, { $push: { knockMatches: matchKnock._id } }, { new: true });
    }

    res.status(201).json(initialRoundMatches);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –û–±–Ω–æ–≤–ª–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞
const updateMatch = async (req, res) => {
  try {
    const { matchId } = req.params;
    const { updatedMatch } = req.body;
    console.log('updatedMatch', updatedMatch);

    // –ù–∞–π–¥–∏—Ç–µ –º–∞—Ç—á –ø–æ –µ–≥–æ ID
    const match = await KnockoutMatch.findById(matchId);
    console.log('match', match);

    if (!match) {
      return res.status(404).json({ message: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
    match.scoreTeam1 = updatedMatch.scoreTeam1;
    match.scoreTeam2 = updatedMatch.scoreTeam2;
    match.winner = updatedMatch.winner;

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç—á
    await match.save();

    res.status(200).json({ message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', match });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

const registerParticipantKnock = async (req, res) => {
  try {
    const userId = req.body.userId;
    console.log(' req.body', req.body);

    const tournamentId = req.body.tournamentId;
    console.log('userId', userId);
    console.log('tournamentId', tournamentId);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–∫–ª—é—á–∞—è –µ–≥–æ –∏–º—è) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const user = await User.findById(userId);
    console.log('user', user);

    if (!user) {
      return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
    }
    const username = user.username;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
    const existingParticipant = await TournamentParticipant.findOne({ user: userId, tournament: tournamentId });
    if (existingParticipant) {
      return res.json({ success: false, message: '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.' });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—É—Ä–Ω–∏—Ä–µ
    const newParticipant = new TournamentParticipant({
      user: userId,
      username: username,
      tournament: tournamentId,
    });

    // const newParticipantKnock = new KnockoutParticipant({
    //   user: userId,
    //   username: username,
    //   tournament: tournamentId,
    // });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
    // await newParticipantKnock.save();
    await newParticipant.save();
    await Tournament.findByIdAndUpdate(
      tournamentId,
      {
        $push: { pendingParticipants: newParticipant },
      },
      { new: true },
    );

    return res.json({
      success: true,
      tournamentId,
      newParticipant,
      message: '–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä! üéâ –ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è –∏–≥—Ä–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–æ–º –∏ —à–∞–≥–æ–º –∫ –ø–æ–±–µ–¥–µ! üèÖ',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    return res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞.' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –≤—ã–ª–µ—Ç
const getParticipants = async (req, res) => {
  try {
    const { tournamentId } = req.params;
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    const participants = await Participant.find({ tournament: tournamentId });
    res.json(participants);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

const acceptParticipantKnock = async (req, res) => {
  try {
    const { participantId } = req.params; // –ü–æ–ª—É—á–∞–µ–º id —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ URL
    const id = participantId;

    const participant = await TournamentParticipant.findByIdAndUpdate(id, { status: 'accepted' }, { new: true });
    const newKnockoutParticipant = await KnockoutParticipant.create({
      user: participant.user, // –ü–µ—Ä–µ–¥–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      username: participant.username, // –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      tournament: participant.tournament, // –ü–µ—Ä–µ–¥–∞–µ–º id —Ç—É—Ä–Ω–∏—Ä–∞
    });
    await newKnockoutParticipant.save();
    res.json(participant);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

const rejectParticipantKnock = async (req, res) => {
  try {
    const participantId = req.params.participantId;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const participant = await KnockoutParticipant.findById(participantId);
    if (!participant) {
      return res.status(404).json({ success: false, message: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–∂–µ "rejected", —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (participant.status === 'rejected') {
      await KnockoutParticipant.findByIdAndDelete(participantId);
      return res.json({ success: true, message: '–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }

    // –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ "rejected" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await KnockoutParticipant.findByIdAndUpdate(participantId, { status: 'rejected' });
    res.json({ success: true, message: '–£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

const acceptedParticipants = async (req, res) => {
  try {
    const tournamentId = req.params.tournamentId; // –ü–æ–ª—É—á–∞–µ–º tournamentId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    // console.log(tournamentId, '888888888');
    // const participantsd = await Participant.find({ tournament: tournamentId });
    const participantsd = await TournamentParticipant.find({ status: 'accepted', tournament: tournamentId });

    res.json({ participantsd, message: 'ff' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

const championTournament = async (req, res) => {
  try {
    const { tournamentId } = req.params;
    const { champion } = req.body;
    console.log('champion', champion);

    const updatedTournament = await Tournament.findByIdAndUpdate(tournamentId, { champion }, { new: true });
    res.json(updatedTournament);
  } catch (error) {
    console.error('Error updating champion:', error.message);
    res.status(500).json({ message: 'Internal server error' });
  }
};

export {
  registerParticipantKnock,
  updateMatch,
  getMatches,
  createMatch,
  getParticipants,
  rejectParticipantKnock,
  createMatchFromObject,
  acceptParticipantKnock,
  acceptedParticipants,
  championTournament,
};
