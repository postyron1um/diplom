import KnockoutMatch from '../models/KnockoutMatch.js'; 
import Participant from '../models/Participant.js';
import KnockoutParticipant from '../models/KnockoutParticipant.js';
import User from '../models/User.js';
import Tournament from '../models/Tournament.js';

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç—á–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –≤—ã–ª–µ—Ç
const getMatches = async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º id —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const { tournamentId } = req.params;
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –º–∞—Ç—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    const matches = await KnockoutMatch.find({ tournament: tournamentId });
    res.json(matches);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á
const createMatch = async (req, res) => {
  try {
    const { tournamentId } = req.params;
    const { team1, team2 } = req.body;
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç—á —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const match = await KnockoutMatch.create({ tournament: tournamentId, team1, team2 });
    res.status(201).json(match);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –≤—ã–ª–µ—Ç
const getParticipants = async (req, res) => {
  try {
    const { tournamentId } = req.params;
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    const participants = await Participant.find({ tournament: tournamentId });
    res.json(participants);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


 const registerParticipantKnock = async (req, res) => {
  try {
    const userId = req.body.userId;
    const tournamentId = req.params.tournamentId;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–∫–ª—é—á–∞—è –µ–≥–æ –∏–º—è) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const user = await User.findById(userId);
    if (!user) {
      return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
    }
    const username = user.username;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
    const existingParticipant = await TournamentParticipant.findOne({ user: userId, tournament: tournamentId });
    if (existingParticipant) {
      return res.json({ success: false, message: '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.' });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—É—Ä–Ω–∏—Ä–µ
    const newParticipant = new KnockoutParticipant({
      user: userId,
      username: username,
      tournament: tournamentId,
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
    await newParticipant.save();
    await Tournament.findByIdAndUpdate(
      tournamentId,
      {
        $push: { pendingParticipants: newParticipant },
      },
      { new: true },
    );

    return res.json({ success: true,tournamentId, newParticipant, message: '–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä! üéâ –ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è –∏–≥—Ä–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–æ–º –∏ —à–∞–≥–æ–º –∫ –ø–æ–±–µ–¥–µ! üèÖ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    return res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞.' });
  }
};

const acceptParticipantKnock = async (req, res) => {
  try {
    const participantId = req.params.participantId;
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ "accepted" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await KnockoutParticipant.findByIdAndUpdate(participantId, { status: 'accepted' });
    res.json({ success: true, message: '–£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ç—É—Ä–Ω–∏—Ä' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
const rejectParticipantKnock = async (req, res) => {
  try {
    const participantId = req.params.participantId;
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ "rejected" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await KnockoutParticipant.findByIdAndUpdate(participantId, { status: 'rejected' });
    res.json({ success: true, message: '–£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


export {registerParticipantKnock, getMatches, createMatch, getParticipants, acceptParticipantKnock,rejectParticipantKnock };