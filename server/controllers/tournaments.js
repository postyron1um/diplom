import Tournament from '../models/Tournament.js';
import User from '../models/User.js';
import Participant from '../models/Participant.js';
import Player from '../models/Player.js';
import TournamentParticipant from '../models/TournamentParticipant.js';
// Create

export const createTournament = async (req, res) => {
  try {
    const { title, tournamentDesc, startDate, endDate, sportType, typeTournament } = req.body;
    // const user = await User.findById(req.userId);
    const newTournament = new Tournament({
      title,
      sportType,
      typeTournament,
      tournamentDesc,
      startDate,
      endDate,
    });
    await newTournament.save();
    await User.findByIdAndUpdate(req.userId, {
      $push: { participatedTournaments: newTournament },
    });
    res.json({message: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—É—Ä–Ω–∏—Ä–∞! üéâ –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –º–∞—Ç—á –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–∑–∞—Ä—Ç–æ–º, –∞ –∫–∞–∂–¥–∞—è –ø–æ–±–µ–¥–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ –≥–æ—Ä–¥–æ—Å—Ç—å! üèÜ'})
  } catch (error) {
    res.json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫' });
  }
};

export const getAll = async (req, res) => {
  try {
    const tournaments = await Tournament.find().sort('-createdAt');
    // console.log(tournaments);
    if (!tournaments) {
      return res.json({ message: '–¢—É—Ä–Ω–∏—Ä–æ–≤ –Ω–µ—Ç' });
    }
    res.json({ tournaments });
  } catch (error) {
    res.json({ message: '–£–ø—Å...' });
  }
};
export const getAllParticipants = async (req, res) => {
  try {
    const tournamentId = req.params.tournamentId;
		console.log(tournamentId);
		
    const participants = await TournamentParticipant.find({ tournament: tournamentId }); // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞
    if (!participants) {
      return res.json({ message: '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç' });
    }
    res.json({ participants });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
    res.json({ message: '–£–ø—Å...' });
  }
};

export const registerParticipant = async (req, res) => {
  try {
    const userId = req.body.userId;
    const tournamentId = req.params.tournamentId;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–∫–ª—é—á–∞—è –µ–≥–æ –∏–º—è) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const user = await User.findById(userId);
    if (!user) {
      return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
    }
    const username = user.username;
		console.log('username', username);
		

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
    const existingParticipant = await TournamentParticipant.findOne({ user: userId, tournament: tournamentId });
    if (existingParticipant) {
      return res.json({ success: false, message: '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.' });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—É—Ä–Ω–∏—Ä–µ
    const newParticipant = new TournamentParticipant({
      user: userId,
      username: username,
      tournament: tournamentId,
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
    await newParticipant.save();
    await Tournament.findByIdAndUpdate(
      tournamentId,
      {
        $push: { pendingParticipants: newParticipant },
      },
      { new: true },
    );

    return res.json({ success: true,tournamentId, newParticipant, message: '–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä! üéâ –ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è –∏–≥—Ä–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–æ–º –∏ —à–∞–≥–æ–º –∫ –ø–æ–±–µ–¥–µ! üèÖ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    return res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞.' });
  }
};

export const updateTournamentStatus = async (req, res) => {
  try {
    const { tournamentId } = req.params;
    console.log('—Ç—É—Ä—É—Ä—É');

    // –ù–∞—Ö–æ–¥–∏–º —Ç—É—Ä–Ω–∏—Ä –ø–æ –µ–≥–æ ID –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    await Tournament.findByIdAndUpdate(tournamentId, { isStarted: true });
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞.' });
  }
};
