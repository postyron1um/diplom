import Match from '../models/RoundRobin.js';
import Player from '../models/Player.js';
import Tournament from '../models/Tournament.js';
import Participant from '../models/Participant.js';
import TournamentParticipant from '../models/TournamentParticipant.js';

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞
export const createMatch = async (req, res) => {
  try {
    const { tournamentId, round, team1, team2, score1, score2, date } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞—Ç –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    const tournament = await Tournament.findById(tournamentId);
    if (!tournament.isStarted) {
      // –ü–æ–ª—É—á–∞–µ–º ObjectId —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
      const team1Participant = await TournamentParticipant.findOne({
        username: team1,
        tournament: tournamentId,
        status: 'accepted',
      });
      const team2Participant = await TournamentParticipant.findOne({
        username: team2,
        tournament: tournamentId,
      });

      if (!team1Participant || !team2Participant) {
        return res.json({ message: '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
      }
      // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –º–∞—Ç—á, –ø–µ—Ä–µ–¥–∞–≤–∞—è ObjectId —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
      const newMatch = new Match({
        tournamentId,
        round,
        team1: team1Participant.username,
        team2: team2Participant.username,
        score1,
        score2,
        date,
      });
      console.log(newMatch);

      await newMatch.save();

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –∏—Ö —Å —Ç–µ–∫—É—â–∏–º —Ç—É—Ä–Ω–∏—Ä–æ–º

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Participant –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
      const participant1 = new Participant({
        user: team1Participant.user,
        username: team1Participant.username,
        tournament: tournamentId,
      });

      const participant2 = new Participant({
        user: team2Participant.user,
        username: team2Participant.username,
        tournament: tournamentId,
      });

      const team1Player = new Player({
        participant: participant1._id,
        tournamentId,
        username: participant2.username,
      });
      const team2Player = new Player({
        participant: participant2._id,
        tournamentId,
        username: participant2.username,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Participant
      await participant1.save();
      await participant2.save();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
      await team1Player.save();
      await team2Player.save();

      // await TournamentParticipant.deleteOne({ _id: team1Participant._id });
      // await TournamentParticipant.deleteOne({ _id: team2Participant._id })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö tournaments
      tournament.matches.push(newMatch._id);
      await tournament.save();

      res.status(201).json({
        success: true,
        match: newMatch,
        message: 'üèÜ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç! üöÄ',
      });
    } else {
      // –¢—É—Ä–Ω–∏—Ä —É–∂–µ –Ω–∞—á–∞—Ç, –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π
      res.status(403).json({
        success: false,
        message: '–¢—É—Ä–Ω–∏—Ä —É–∂–µ –Ω–∞—á–∞—Ç. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ.',
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—á–∞.' });
  }
};
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
export const getAllMatches = async (req, res) => {
  try {
    const matches = await Match.find();
    res.json({ success: true, matches });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π.' });
  }
};

export const updateMatch = async (req, res) => {
  try {
    const { matchId } = req.body;
    const { score1, score2 } = req.body;
    // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –ø–æ –µ–≥–æ ID –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    const updatedMatch = await Match.findByIdAndUpdate(matchId, { score1, score2 }, { new: true });
    res.json({ success: true, match: updatedMatch });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞.' });
  }
};

export const updatedMatchResultTimur = async (req, res) => {
  try {
    // const { tournamentId } = req.params;
    // console.log(tournamentId, 'fdfdfdfd')
    const { matchId, score1, score2, tournamentId } = req.body;
    const match = await Match.findById(matchId);
    if (!match) {
      return res.status(404).json({ message: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const previousScore1 = match.previousScore1 || 0;
    const previousScore2 = match.previousScore2 || 0;
    if (score1 === previousScore1 && score2 === previousScore2 && (score1 !== 0 || score2 !== 0)) {
      return res.status(200).json({ message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å' });
    }

    match.previousScore1 = match.score1;
    match.previousScore2 = match.score2;
    match.score1 = score1;
    match.score2 = score2;
    await match.save();

    const team1User = await Participant.findOne({ username: match.team1, tournament: tournamentId });
    const team2User = await Participant.findOne({ username: match.team2, tournament: tournamentId });
    console.log('team1User', team1User);
    console.log('team2User', team2User);

    if (!team1User || !team2User) {
      return res.status(404).json({ message: '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    const player1 = await Player.findOne({ participant: team1User._id });
    const player2 = await Player.findOne({ participant: team2User._id });
    console.log('player1', player1);
    console.log('player2', player2);
    if (score1 > score2 && previousScore1 <= previousScore2) {
      player1.wins += 1;
      if (player1.losses > 0) {
        player1.losses -= 1;
      }
      player2.losses += 1;
      if (player2.wins > 0) {
        player2.wins -= 1;
      }
    }

    if (score1 < score2 && previousScore1 >= previousScore2) {
      player2.wins += 1;
      if (player2.losses > 0) {
        player2.losses -= 1;
      }
      player1.losses += 1;
      if (player1.wins > 0) {
        player1.wins -= 1;
      }
    }

    if (score1 === score2 && previousScore1 === 0 && previousScore2 === 0 && match.isFirstZeroZeroEdit) {
      // –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—á–µ—Ç —Ä–∞–≤–µ–Ω 0:0
      player1.draws += 1;
      player2.draws += 1;
      match.isFirstZeroZeroEdit = false;
      await match.save();
    } else if (score1 === score2 && previousScore1 !== previousScore2) {
      // –≠—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏ —Å—á–µ—Ç —Ä–∞–≤–µ–Ω 0:0
      player1.draws += 1;
      player2.draws += 1;
      if (player2.wins > 0) {
        player2.wins -= 1;
      }
      if (player1.wins > 0) {
        player1.wins -= 1;
      }

      if (player2.losses > 0) {
        player2.losses -= 1;
      }
      if (player1.losses > 0) {
        player1.losses -= 1;
      }
    }

    if (score1 !== score2 && previousScore1 === previousScore2) {
      // –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏ —Å—á–µ—Ç –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–≤–µ–Ω 0:0
      if (player1.draws > 0) {
        player1.draws -= 1;
      }
      if (player2.draws > 0) {
        player2.draws -= 1;
      }

      // match.isFirstZeroZeroEdit = false;
      // await match.save();
    }

    let goalsForChange1 = score1 - previousScore1;
    let goalsAgainstChange1 = score2 - previousScore2;
    let goalsForChange2 = score2 - previousScore2;
    let goalsAgainstChange2 = score1 - previousScore1;

    if (score1 === score2) {
      // –ü—Ä–∏ –Ω–∏—á—å–µ –≤—ã—á–∏—Ç–∞–µ–º –≥–æ–ª—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      goalsForChange1 -= match.goalsForChange1 || 0;
      goalsAgainstChange1 -= match.goalsAgainstChange1 || 0;
      goalsForChange2 -= match.goalsForChange2 || 0;
      goalsAgainstChange2 -= match.goalsAgainstChange2 || 0;

      // –û–±–Ω—É–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–æ–ª–∞—Ö
      match.goalsForChange1 = 0;
      match.goalsAgainstChange1 = 0;
      match.goalsForChange2 = 0;
      match.goalsAgainstChange2 = 0;
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–æ–ª–∞—Ö –≤ –º–∞—Ç—á–µ
      match.goalsForChange1 = goalsForChange1;
      match.goalsAgainstChange1 = goalsAgainstChange1;
      match.goalsForChange2 = goalsForChange2;
      match.goalsAgainstChange2 = goalsAgainstChange2;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–±–∏—Ç—ã–µ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≥–æ–ª—ã
    player1.goalsFor += goalsForChange1;
    player1.goalsAgainst += goalsAgainstChange1;
    player2.goalsFor += goalsForChange2;
    player2.goalsAgainst += goalsAgainstChange2;

    await player1.save();
    await player2.save();

    return res.status(200).json({ message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞:', error);
    return res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
